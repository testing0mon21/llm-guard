# Start from an NVIDIA CUDA base image with Python 3
FROM nvcr.io/nvidia/cuda:12.1.0-runtime-ubuntu22.04 as base

LABEL org.opencontainers.image.source=https://github.com/protectai/llm-guard
LABEL org.opencontainers.image.description="LLM Guard API"
LABEL org.opencontainers.image.licenses=MIT

# Install Python and other necessary packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3 python3-pip python3-setuptools python3-distutils \
    build-essential curl git openjdk-17-jre-headless \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Alias python3 to python
RUN ln -s /usr/bin/python3 /usr/bin/python

# Create a non-root user and set user environment variables
RUN useradd -m -u 1000 user
USER user
ENV HOME=/home/user \
    PATH=/home/user/.local/bin:$PATH

# ensures that the python output is sent straight to terminal (e.g. your container log)
# without being first buffered and that you can see the output of your application (e.g. django logs)
# in real time. Equivalent to python -u: https://docs.python.org/3/using/cmdline.html#cmdoption-u
ENV PYTHONUNBUFFERED 1

# https://docs.python.org/3/using/cmdline.html#envvar-PYTHONDONTWRITEBYTECODE
# Prevents Python from writing .pyc files to disk
ENV PYTHONDONTWRITEBYTECODE 1

# Set up a working directory
WORKDIR /app

# Copy pyproject.toml and other necessary files for installation
COPY --chown=user:user pyproject.toml ./
COPY --chown=user:user app ./app
COPY --chown=user:user generate_antlr_grammars.sh ./

# Install the project's dependencies
RUN pip3 install --no-cache-dir --upgrade pip && \
    pip3 install --no-cache-dir ".[gpu]" && \
    python3 -m spacy download en_core_web_sm && \
    chmod +x ./generate_antlr_grammars.sh && \
    ./generate_antlr_grammars.sh && \
    pip3 install --no-cache-dir antlr4-python3-runtime==4.9.3

# Копируем конфигурацию и скрипт для предзагрузки моделей
COPY --chown=user:user ./config/scanners.yml ./config/scanners.yml
COPY --chown=user:user preload_models.py ./preload_models.py

# Устанавливаем PyYAML для работы скрипта предзагрузки
RUN pip install --no-cache-dir pyyaml

# Предварительная загрузка моделей во время сборки образа
RUN echo "Начинаем предварительную загрузку моделей..." && \
    python preload_models.py && \
    echo "Предварительная загрузка моделей завершена"

# Создаем директорию для кэша моделей и делаем её постоянной
RUN mkdir -p $HOME/.cache/huggingface
VOLUME $HOME/.cache/huggingface

COPY --chown=user:user entrypoint.sh ./entrypoint.sh

RUN chmod +x ./entrypoint.sh

ENV PYTHONPATH=$HOME/app

EXPOSE 8000

ENTRYPOINT ["./entrypoint.sh"]
