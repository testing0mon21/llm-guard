import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;
import java.security.Key;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;

public class JwtTokenUtil {
    private final Key key = Keys.secretKeyFor(SignatureAlgorithm.HS256);
    
    /**
     * Generate a JWT token for a user.
     */
    public String generateToken(String username) {
        Map<String, Object> claims = new HashMap<>();
        return createToken(claims, username);
    }
    
    private String createToken(Map<String, Object> claims, String subject) {
        return Jwts.builder()
            .setClaims(claims)
            .setSubject(subject)
            .setIssuedAt(new Date(System.currentTimeMillis()))
            .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60 * 10)) // 10 hours
            .signWith(key)
            .compact();
    }
    
    /**
     * Validate a JWT token.
     */
    public Boolean validateToken(String token) {
        try {
            Jwts.parserBuilder().setSigningKey(key).build().parseClaimsJws(token);
            return true;
        } catch (Exception e) {
            return false;
        }
    }
    
    /**
     * Extract username from JWT token.
     */
    public String extractUsername(String token) {
        return extractClaim(token, Claims::getSubject);
    }
    
    private <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
        final Claims claims = extractAllClaims(token);
        return claimsResolver.apply(claims);
    }
    
    private Claims extractAllClaims(String token) {
        return Jwts.parserBuilder().setSigningKey(key).build().parseClaimsJws(token).getBody();
    }
}function validateEmail(email) {
  // Validate an email address using regex
  const pattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
  return pattern.test(email);
}function generatePassword(length = 12) {
  // Generate a random password with the specified length
  const charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+~`|}{[]:;?><,./-=';
  let password = '';
  for (let i = 0; i < length; i++) {
    const randomIndex = Math.floor(Math.random() * charset.length);
    password += charset[randomIndex];
  }
  return password;
}function hashPassword(password, salt = null) {
  // Hash a password using PBKDF2
  const crypto = require('crypto');
  
  if (!salt) {
    salt = crypto.randomBytes(16).toString('hex');
  }
  
  const hash = crypto.pbkdf2Sync(password, salt, 1000, 64, 'sha512').toString('hex');
  return { salt, hash };
}function hashPassword(password, salt = null) {
  // Hash a password using PBKDF2
  const crypto = require('crypto');
  
  if (!salt) {
    salt = crypto.randomBytes(16).toString('hex');
  }
  
  const hash = crypto.pbkdf2Sync(password, salt, 1000, 64, 'sha512').toString('hex');
  return { salt, hash };
}function hashPassword(password, salt = null) {
  // Hash a password using PBKDF2
  const crypto = require('crypto');
  
  if (!salt) {
    salt = crypto.randomBytes(16).toString('hex');
  }
  
  const hash = crypto.pbkdf2Sync(password, salt, 1000, 64, 'sha512').toString('hex');
  return { salt, hash };
}function hashPassword(password, salt = null) {
  // Hash a password using PBKDF2
  const crypto = require('crypto');
  
  if (!salt) {
    salt = crypto.randomBytes(16).toString('hex');
  }
  
  const hash = crypto.pbkdf2Sync(password, salt, 1000, 64, 'sha512').toString('hex');
  return { salt, hash };
}function quickSort(arr) {
  // Quicksort implementation
  if (arr.length <= 1) {
    return arr;
  }
  
  const pivot = arr[Math.floor(arr.length / 2)];
  const left = arr.filter(x => x < pivot);
  const middle = arr.filter(x => x === pivot);
  const right = arr.filter(x => x > pivot);
  
  return [...quickSort(left), ...middle, ...quickSort(right)];
}function hashPassword(password, salt = null) {
  // Hash a password using PBKDF2
  const crypto = require('crypto');
  
  if (!salt) {
    salt = crypto.randomBytes(16).toString('hex');
  }
  
  const hash = crypto.pbkdf2Sync(password, salt, 1000, 64, 'sha512').toString('hex');
  return { salt, hash };
}function validateEmail(email) {
  // Validate an email address using regex
  const pattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
  return pattern.test(email);
}function verifyJwtToken(token, secretKey) {
  // Verify a JWT token
  const jwt = require('jsonwebtoken');
  
  try {
    const decoded = jwt.verify(token, secretKey);
    return { valid: true, payload: decoded };
  } catch (err) {
    return { valid: false, payload: null };
  }
}function quickSort(arr) {
  // Quicksort implementation
  if (arr.length <= 1) {
    return arr;
  }
  
  const pivot = arr[Math.floor(arr.length / 2)];
  const left = arr.filter(x => x < pivot);
  const middle = arr.filter(x => x === pivot);
  const right = arr.filter(x => x > pivot);
  
  return [...quickSort(left), ...middle, ...quickSort(right)];
}function validateEmail(email) {
  // Validate an email address using regex
  const pattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
  return pattern.test(email);
}function binarySearch(arr, target) {
  // Perform binary search on a sorted array
  let left = 0;
  let right = arr.length - 1;
  
  while (left <= right) {
    const mid = Math.floor((left + right) / 2);
    if (arr[mid] === target) {
      return mid;
    } else if (arr[mid] < target) {
      left = mid + 1;
    } else {
      right = mid - 1;
    }
  }
  
  return -1;
}function quickSort(arr) {
  // Quicksort implementation
  if (arr.length <= 1) {
    return arr;
  }
  
  const pivot = arr[Math.floor(arr.length / 2)];
  const left = arr.filter(x => x < pivot);
  const middle = arr.filter(x => x === pivot);
  const right = arr.filter(x => x > pivot);
  
  return [...quickSort(left), ...middle, ...quickSort(right)];
}function binarySearch(arr, target) {
  // Perform binary search on a sorted array
  let left = 0;
  let right = arr.length - 1;
  
  while (left <= right) {
    const mid = Math.floor((left + right) / 2);
    if (arr[mid] === target) {
      return mid;
    } else if (arr[mid] < target) {
      left = mid + 1;
    } else {
      right = mid - 1;
    }
  }
  
  return -1;
}function hashPassword(password, salt = null) {
  // Hash a password using PBKDF2
  const crypto = require('crypto');
  
  if (!salt) {
    salt = crypto.randomBytes(16).toString('hex');
  }
  
  const hash = crypto.pbkdf2Sync(password, salt, 1000, 64, 'sha512').toString('hex');
  return { salt, hash };
}function quickSort(arr) {
  // Quicksort implementation
  if (arr.length <= 1) {
    return arr;
  }
  
  const pivot = arr[Math.floor(arr.length / 2)];
  const left = arr.filter(x => x < pivot);
  const middle = arr.filter(x => x === pivot);
  const right = arr.filter(x => x > pivot);
  
  return [...quickSort(left), ...middle, ...quickSort(right)];
}function generatePassword(length = 12) {
  // Generate a random password with the specified length
  const charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+~`|}{[]:;?><,./-=';
  let password = '';
  for (let i = 0; i < length; i++) {
    const randomIndex = Math.floor(Math.random() * charset.length);
    password += charset[randomIndex];
  }
  return password;
}function binarySearch(arr, target) {
  // Perform binary search on a sorted array
  let left = 0;
  let right = arr.length - 1;
  
  while (left <= right) {
    const mid = Math.floor((left + right) / 2);
    if (arr[mid] === target) {
      return mid;
    } else if (arr[mid] < target) {
      left = mid + 1;
    } else {
      right = mid - 1;
    }
  }
  
  return -1;
}function generatePassword(length = 12) {
  // Generate a random password with the specified length
  const charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+~`|}{[]:;?><,./-=';
  let password = '';
  for (let i = 0; i < length; i++) {
    const randomIndex = Math.floor(Math.random() * charset.length);
    password += charset[randomIndex];
  }
  return password;
}function verifyJwtToken(token, secretKey) {
  // Verify a JWT token
  const jwt = require('jsonwebtoken');
  
  try {
    const decoded = jwt.verify(token, secretKey);
    return { valid: true, payload: decoded };
  } catch (err) {
    return { valid: false, payload: null };
  }
}function binarySearch(arr, target) {
  // Perform binary search on a sorted array
  let left = 0;
  let right = arr.length - 1;
  
  while (left <= right) {
    const mid = Math.floor((left + right) / 2);
    if (arr[mid] === target) {
      return mid;
    } else if (arr[mid] < target) {
      left = mid + 1;
    } else {
      right = mid - 1;
    }
  }
  
  return -1;
}function validateEmail(email) {
  // Validate an email address using regex
  const pattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
  return pattern.test(email);
}function quickSort(arr) {
  // Quicksort implementation
  if (arr.length <= 1) {
    return arr;
  }
  
  const pivot = arr[Math.floor(arr.length / 2)];
  const left = arr.filter(x => x < pivot);
  const middle = arr.filter(x => x === pivot);
  const right = arr.filter(x => x > pivot);
  
  return [...quickSort(left), ...middle, ...quickSort(right)];
}function binarySearch(arr, target) {
  // Perform binary search on a sorted array
  let left = 0;
  let right = arr.length - 1;
  
  while (left <= right) {
    const mid = Math.floor((left + right) / 2);
    if (arr[mid] === target) {
      return mid;
    } else if (arr[mid] < target) {
      left = mid + 1;
    } else {
      right = mid - 1;
    }
  }
  
  return -1;
}function generatePassword(length = 12) {
  // Generate a random password with the specified length
  const charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+~`|}{[]:;?><,./-=';
  let password = '';
  for (let i = 0; i < length; i++) {
    const randomIndex = Math.floor(Math.random() * charset.length);
    password += charset[randomIndex];
  }
  return password;
}function binarySearch(arr, target) {
  // Perform binary search on a sorted array
  let left = 0;
  let right = arr.length - 1;
  
  while (left <= right) {
    const mid = Math.floor((left + right) / 2);
    if (arr[mid] === target) {
      return mid;
    } else if (arr[mid] < target) {
      left = mid + 1;
    } else {
      right = mid - 1;
    }
  }
  
  return -1;
}function quickSort(arr) {
  // Quicksort implementation
  if (arr.length <= 1) {
    return arr;
  }
  
  const pivot = arr[Math.floor(arr.length / 2)];
  const left = arr.filter(x => x < pivot);
  const middle = arr.filter(x => x === pivot);
  const right = arr.filter(x => x > pivot);
  
  return [...quickSort(left), ...middle, ...quickSort(right)];
}function hashPassword(password, salt = null) {
  // Hash a password using PBKDF2
  const crypto = require('crypto');
  
  if (!salt) {
    salt = crypto.randomBytes(16).toString('hex');
  }
  
  const hash = crypto.pbkdf2Sync(password, salt, 1000, 64, 'sha512').toString('hex');
  return { salt, hash };
}function verifyJwtToken(token, secretKey) {
  // Verify a JWT token
  const jwt = require('jsonwebtoken');
  
  try {
    const decoded = jwt.verify(token, secretKey);
    return { valid: true, payload: decoded };
  } catch (err) {
    return { valid: false, payload: null };
  }
}function hashPassword(password, salt = null) {
  // Hash a password using PBKDF2
  const crypto = require('crypto');
  
  if (!salt) {
    salt = crypto.randomBytes(16).toString('hex');
  }
  
  const hash = crypto.pbkdf2Sync(password, salt, 1000, 64, 'sha512').toString('hex');
  return { salt, hash };
}function hashPassword(password, salt = null) {
  // Hash a password using PBKDF2
  const crypto = require('crypto');
  
  if (!salt) {
    salt = crypto.randomBytes(16).toString('hex');
  }
  
  const hash = crypto.pbkdf2Sync(password, salt, 1000, 64, 'sha512').toString('hex');
  return { salt, hash };
}function quickSort(arr) {
  // Quicksort implementation
  if (arr.length <= 1) {
    return arr;
  }
  
  const pivot = arr[Math.floor(arr.length / 2)];
  const left = arr.filter(x => x < pivot);
  const middle = arr.filter(x => x === pivot);
  const right = arr.filter(x => x > pivot);
  
  return [...quickSort(left), ...middle, ...quickSort(right)];
}function quickSort(arr) {
  // Quicksort implementation
  if (arr.length <= 1) {
    return arr;
  }
  
  const pivot = arr[Math.floor(arr.length / 2)];
  const left = arr.filter(x => x < pivot);
  const middle = arr.filter(x => x === pivot);
  const right = arr.filter(x => x > pivot);
  
  return [...quickSort(left), ...middle, ...quickSort(right)];
}def validate_email(email):
    """Validate an email address using regex."""
    import re
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    if re.match(pattern, email):
        return True
    else:
        return Falsedef generate_password(length=12):
    """Generate a random password with the specified length."""
    import random
    import string
    characters = string.ascii_letters + string.digits + string.punctuation
    password = ''.join(random.choice(characters) for _ in range(length))
    return passworddef connect_to_postgres(db_params):
    """Connect to a PostgreSQL database."""
    import psycopg2
    
    conn = None
    try:
        conn = psycopg2.connect(
            host=db_params['host'],
            database=db_params['database'],
            user=db_params['user'],
            password=db_params['password']
        )
        return conn
    except Exception as e:
        print(f"Error connecting to database: {e}")
        if conn is not None:
            conn.close()
        return Nonedef verify_jwt_token(token, secret_key):
    """Verify a JWT token."""
    import jwt
    
    try:
        decoded = jwt.decode(token, secret_key, algorithms=['HS256'])
        return True, decoded
    except jwt.InvalidTokenError:
        return False, Nonedef json_to_csv(json_data, output_file):
    """Convert JSON data to CSV format."""
    import csv
    import json
    
    with open(json_data, 'r') as json_file:
        data = json.load(json_file)
    
    keys = data[0].keys() if data else []
    
    with open(output_file, 'w', newline='') as csv_file:
        writer = csv.DictWriter(csv_file, fieldnames=keys)
        writer.writeheader()
        writer.writerows(data)def binary_search(arr, target):
    """Perform binary search on a sorted array."""
    left, right = 0, len(arr) - 1
    
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    
    return -1def verify_jwt_token(token, secret_key):
    """Verify a JWT token."""
    import jwt
    
    try:
        decoded = jwt.decode(token, secret_key, algorithms=['HS256'])
        return True, decoded
    except jwt.InvalidTokenError:
        return False, Nonedef verify_jwt_token(token, secret_key):
    """Verify a JWT token."""
    import jwt
    
    try:
        decoded = jwt.decode(token, secret_key, algorithms=['HS256'])
        return True, decoded
    except jwt.InvalidTokenError:
        return False, Nonedef connect_to_postgres(db_params):
    """Connect to a PostgreSQL database."""
    import psycopg2
    
    conn = None
    try:
        conn = psycopg2.connect(
            host=db_params['host'],
            database=db_params['database'],
            user=db_params['user'],
            password=db_params['password']
        )
        return conn
    except Exception as e:
        print(f"Error connecting to database: {e}")
        if conn is not None:
            conn.close()
        return Nonedef hash_password(password, salt=None):
    """Hash a password using PBKDF2."""
    import hashlib
    import os
    
    if salt is None:
        salt = os.urandom(32)
    
    key = hashlib.pbkdf2_hmac('sha256', password.encode('utf-8'), salt, 100000)
    return {'salt': salt, 'key': key}def flatten_list(nested_list):
    """Flatten a nested list."""
    flattened = []
    for item in nested_list:
        if isinstance(item, list):
            flattened.extend(flatten_list(item))
        else:
            flattened.append(item)
    return flatteneddef hash_password(password, salt=None):
    """Hash a password using PBKDF2."""
    import hashlib
    import os
    
    if salt is None:
        salt = os.urandom(32)
    
    key = hashlib.pbkdf2_hmac('sha256', password.encode('utf-8'), salt, 100000)
    return {'salt': salt, 'key': key}def flatten_list(nested_list):
    """Flatten a nested list."""
    flattened = []
    for item in nested_list:
        if isinstance(item, list):
            flattened.extend(flatten_list(item))
        else:
            flattened.append(item)
    return flatteneddef flatten_list(nested_list):
    """Flatten a nested list."""
    flattened = []
    for item in nested_list:
        if isinstance(item, list):
            flattened.extend(flatten_list(item))
        else:
            flattened.append(item)
    return flatteneddef parse_csv(file_path):
    """Parse a CSV file and return a list of dictionaries."""
    import csv
    
    data = []
    with open(file_path, 'r') as f:
        reader = csv.DictReader(f)
        for row in reader:
            data.append(row)
    return datadef verify_jwt_token(token, secret_key):
    """Verify a JWT token."""
    import jwt
    
    try:
        decoded = jwt.decode(token, secret_key, algorithms=['HS256'])
        return True, decoded
    except jwt.InvalidTokenError:
        return False, Nonedef json_to_csv(json_data, output_file):
    """Convert JSON data to CSV format."""
    import csv
    import json
    
    with open(json_data, 'r') as json_file:
        data = json.load(json_file)
    
    keys = data[0].keys() if data else []
    
    with open(output_file, 'w', newline='') as csv_file:
        writer = csv.DictWriter(csv_file, fieldnames=keys)
        writer.writeheader()
        writer.writerows(data)def flatten_list(nested_list):
    """Flatten a nested list."""
    flattened = []
    for item in nested_list:
        if isinstance(item, list):
            flattened.extend(flatten_list(item))
        else:
            flattened.append(item)
    return flatteneddef connect_to_postgres(db_params):
    """Connect to a PostgreSQL database."""
    import psycopg2
    
    conn = None
    try:
        conn = psycopg2.connect(
            host=db_params['host'],
            database=db_params['database'],
            user=db_params['user'],
            password=db_params['password']
        )
        return conn
    except Exception as e:
        print(f"Error connecting to database: {e}")
        if conn is not None:
            conn.close()
        return Nonedef connect_to_postgres(db_params):
    """Connect to a PostgreSQL database."""
    import psycopg2
    
    conn = None
    try:
        conn = psycopg2.connect(
            host=db_params['host'],
            database=db_params['database'],
            user=db_params['user'],
            password=db_params['password']
        )
        return conn
    except Exception as e:
        print(f"Error connecting to database: {e}")
        if conn is not None:
            conn.close()
        return Nonedef connect_to_postgres(db_params):
    """Connect to a PostgreSQL database."""
    import psycopg2
    
    conn = None
    try:
        conn = psycopg2.connect(
            host=db_params['host'],
            database=db_params['database'],
            user=db_params['user'],
            password=db_params['password']
        )
        return conn
    except Exception as e:
        print(f"Error connecting to database: {e}")
        if conn is not None:
            conn.close()
        return Nonedef parse_csv(file_path):
    """Parse a CSV file and return a list of dictionaries."""
    import csv
    
    data = []
    with open(file_path, 'r') as f:
        reader = csv.DictReader(f)
        for row in reader:
            data.append(row)
    return datadef hash_password(password, salt=None):
    """Hash a password using PBKDF2."""
    import hashlib
    import os
    
    if salt is None:
        salt = os.urandom(32)
    
    key = hashlib.pbkdf2_hmac('sha256', password.encode('utf-8'), salt, 100000)
    return {'salt': salt, 'key': key}def binary_search(arr, target):
    """Perform binary search on a sorted array."""
    left, right = 0, len(arr) - 1
    
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    
    return -1def json_to_csv(json_data, output_file):
    """Convert JSON data to CSV format."""
    import csv
    import json
    
    with open(json_data, 'r') as json_file:
        data = json.load(json_file)
    
    keys = data[0].keys() if data else []
    
    with open(output_file, 'w', newline='') as csv_file:
        writer = csv.DictWriter(csv_file, fieldnames=keys)
        writer.writeheader()
        writer.writerows(data)def generate_password(length=12):
    """Generate a random password with the specified length."""
    import random
    import string
    characters = string.ascii_letters + string.digits + string.punctuation
    password = ''.join(random.choice(characters) for _ in range(length))
    return passworddef parse_csv(file_path):
    """Parse a CSV file and return a list of dictionaries."""
    import csv
    
    data = []
    with open(file_path, 'r') as f:
        reader = csv.DictReader(f)
        for row in reader:
            data.append(row)
    return datadef flatten_list(nested_list):
    """Flatten a nested list."""
    flattened = []
    for item in nested_list:
        if isinstance(item, list):
            flattened.extend(flatten_list(item))
        else:
            flattened.append(item)
    return flatteneddef generate_password(length=12):
    """Generate a random password with the specified length."""
    import random
    import string
    characters = string.ascii_letters + string.digits + string.punctuation
    password = ''.join(random.choice(characters) for _ in range(length))
    return passworddef connect_to_postgres(db_params):
    """Connect to a PostgreSQL database."""
    import psycopg2
    
    conn = None
    try:
        conn = psycopg2.connect(
            host=db_params['host'],
            database=db_params['database'],
            user=db_params['user'],
            password=db_params['password']
        )
        return conn
    except Exception as e:
        print(f"Error connecting to database: {e}")
        if conn is not None:
            conn.close()
        return Nonedef flatten_list(nested_list):
    """Flatten a nested list."""
    flattened = []
    for item in nested_list:
        if isinstance(item, list):
            flattened.extend(flatten_list(item))
        else:
            flattened.append(item)
    return flatteneddef hash_password(password, salt=None):
    """Hash a password using PBKDF2."""
    import hashlib
    import os
    
    if salt is None:
        salt = os.urandom(32)
    
    key = hashlib.pbkdf2_hmac('sha256', password.encode('utf-8'), salt, 100000)
    return {'salt': salt, 'key': key}def fibonacci(n, memo={}):
    """Calculate the nth Fibonacci number using memoization."""
    if n in memo:
        return memo[n]
    if n <= 2:
        return 1
    
    memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo)
    return memo[n]def quicksort(arr):
    """Quicksort implementation."""
    if len(arr) <= 1:
        return arr
    
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    
    return quicksort(left) + middle + quicksort(right)def fibonacci(n, memo={}):
    """Calculate the nth Fibonacci number using memoization."""
    if n in memo:
        return memo[n]
    if n <= 2:
        return 1
    
    memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo)
    return memo[n]def hash_password(password, salt=None):
    """Hash a password using PBKDF2."""
    import hashlib
    import os
    
    if salt is None:
        salt = os.urandom(32)
    
    key = hashlib.pbkdf2_hmac('sha256', password.encode('utf-8'), salt, 100000)
    return {'salt': salt, 'key': key}def verify_jwt_token(token, secret_key):
    """Verify a JWT token."""
    import jwt
    
    try:
        decoded = jwt.decode(token, secret_key, algorithms=['HS256'])
        return True, decoded
    except jwt.InvalidTokenError:
        return False, Nonedef parse_csv(file_path):
    """Parse a CSV file and return a list of dictionaries."""
    import csv
    
    data = []
    with open(file_path, 'r') as f:
        reader = csv.DictReader(f)
        for row in reader:
            data.append(row)
    return datadef json_to_csv(json_data, output_file):
    """Convert JSON data to CSV format."""
    import csv
    import json
    
    with open(json_data, 'r') as json_file:
        data = json.load(json_file)
    
    keys = data[0].keys() if data else []
    
    with open(output_file, 'w', newline='') as csv_file:
        writer = csv.DictWriter(csv_file, fieldnames=keys)
        writer.writeheader()
        writer.writerows(data)