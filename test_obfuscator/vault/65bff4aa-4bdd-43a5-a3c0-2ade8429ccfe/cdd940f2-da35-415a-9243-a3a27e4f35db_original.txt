
// Authentication utility functions for a web application
async function generateSecureToken(userId, secretKey) {
  const crypto = require('crypto');
  const payload = {
    user: userId,
    timestamp: Date.now(),
    expires: Date.now() + 3600000 // 1 hour
  };
  
  const data = JSON.stringify(payload);
  const hmac = crypto.createHmac('sha256', secretKey);
  const signature = hmac.update(data).digest('hex');
  
  return {
    data: Buffer.from(data).toString('base64'),
    signature: signature
  };
}

function verifyToken(token, secretKey) {
  try {
    const crypto = require('crypto');
    const data = Buffer.from(token.data, 'base64').toString();
    const payload = JSON.parse(data);
    
    // Check if token is expired
    if (payload.expires < Date.now()) {
      return { valid: false, reason: 'Token expired' };
    }
    
    // Verify signature
    const hmac = crypto.createHmac('sha256', secretKey);
    const expectedSignature = hmac.update(data).digest('hex');
    
    if (token.signature !== expectedSignature) {
      return { valid: false, reason: 'Invalid signature' };
    }
    
    return { valid: true, payload: payload };
  } catch (error) {
    return { valid: false, reason: 'Error parsing token' };
  }
}

