Проанализируй следующий код и предложи улучшения безопасности:

```python
def validate_email(email):
    """Validate an email address using regex."""
    import re
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    if re.match(pattern, email):
        return True
    else:
        return Falsedef generate_password(length=12):
    """Generate a random password with the specified length."""
    import random
    import string
    characters = string.ascii_letters + string.digits + string.punctuation
    password = ''.join(random.choice(characters) for _ in range(length))
    return passworddef connect_to_postgres(db_params):
    """Connect to a PostgreSQL database."""
    import psycopg2
    
    conn = None
    try:
        conn = psycopg2.connect(
            host=db_params['host'],
            database=db_params['database'],
            user=db_params['user'],
            password=db_params['password']
        )
        return conn
    except Exception as e:
        print(f"Error connecting to database: {e}")
        if conn is not None:
            conn.close()
        return Nonedef verify_jwt_token(token, secret_key):
    """Verify a JWT token."""
    import jwt
    
    try:
        decoded = jwt.decode(token, secret_key, algorithms=['HS256'])
        return True, decoded
    except jwt.InvalidTokenError:
        return False, Nonedef json_to_csv(json_data, output_file):
    """Convert JSON data to CSV format."""
    import csv
    import json
    
    with open(json_data, 'r') as json_file:
        data = json.load(json_file)
    
    keys = data[0].keys() if data else []
    
    with open(output_file, 'w', newline='') as csv_file:
        writer = csv.DictWriter(csv_file, fieldnames=keys)
        writer.writeheader()
        writer.writerows(data)def binary_search(arr, target):
    """Perform binary search on a sorted array."""
    left, right = 0, len(arr) - 1
    
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    
    return -1def verify_jwt_token(token, secret_key):
    """Verify a JWT token."""
    import jwt
    
    try:
        decoded = jwt.decode(token, secret_key, algorithms=['HS256'])
        return True, decoded
    except jwt.InvalidTokenError:
        return False, Nonedef verify_jwt_token(token, secret_key):
    """Verify a JWT token."""
    import jwt
    
    try:
        decoded = jwt.decode(token, secret_key, algorithms=['HS256'])
        return True, decoded
    except jwt.InvalidTokenError:
        return False, Nonedef connect_to_postgres(db_params):
    """Connect to a PostgreSQL database."""
    import psycopg2
    
    conn = None
    try:
        conn = psycopg2.connect(
            host=db_params['host'],
            database=db_params['database'],
            user=db_params['user'],
            password=db_params['password']
        )
        return conn
    except Exception as e:
        print(f"Error connecting to database: {e}")
        if conn is not None:
            conn.close()
        return Nonedef hash_password(password, salt=None):
    """Hash a password using PBKDF2."""
    import hashlib
    import os
    
    if salt is None:
        salt = os.urandom(32)
    
    key = hashlib.pbkdf2_hmac('sha256', password.encode('utf-8'), salt, 100000)
    return {'salt': salt, 'key': key}def flatten_list(nested_list):
    """Flatten a nested list."""
    flattened = []
    for item in nested_list:
        if isinstance(item, list):
            flattened.extend(flatten_list(item))
        else:
            flattened.append(item)
    return flatteneddef hash_password(password, salt=None):
    """Hash a password using PBKDF2."""
    import hashlib
    import os
    
    if salt is None:
        salt = os.urandom(32)
    
    key = hashlib.pbkdf2_hmac('sha256', password.encode('utf-8'), salt, 100000)
    return {'salt': salt, 'key': key}def flatten_list(nested_list):
    """Flatten a nested list."""
    flattened = []
    for item in nested_list:
        if isinstance(item, list):
            flattened.extend(flatten_list(item))
        else:
            flattened.append(item)
    return flatteneddef flatten_list(nested_list):
    """Flatten a nested list."""
    flattened = []
    for item in nested_list:
        if isinstance(item, list):
            flattened.extend(flatten_list(item))
        else:
            flattened.append(item)
    return flatteneddef parse_csv(file_path):
    """Parse a CSV file and return a list of dictionaries."""
    import csv
    
    data = []
    with open(file_path, 'r') as f:
        reader = csv.DictReader(f)
        for row in reader:
            data.append(row)
    return datadef verify_jwt_token(token, secret_key):
    """Verify a JWT token."""
    import jwt
    
    try:
        decoded = jwt.decode(token, secret_key, algorithms=['HS256'])
        return True, decoded
    except jwt.InvalidTokenError:
        return False, Nonedef json_to_csv(json_data, output_file):
    """Convert JSON data to CSV format."""
    import csv
    import json
    
    with open(json_data, 'r') as json_file:
        data = json.load(json_file)
    
    keys = data[0].keys() if data else []
    
    with open(output_file, 'w', newline='') as csv_file:
        writer = csv.DictWriter(csv_file, fieldnames=keys)
        writer.writeheader()
        writer.writerows(data)def flatten_list(nested_list):
    """Flatten a nested list."""
    flattened = []
    for item in nested_list:
        if isinstance(item, list):
            flattened.extend(flatten_list(item))
        else:
            flattened.append(item)
    return flatteneddef connect_to_postgres(db_params):
    """Connect to a PostgreSQL database."""
    import psycopg2
    
    conn = None
    try:
        conn = psycopg2.connect(
            host=db_params['host'],
            database=db_params['database'],
            user=db_params['user'],
            password=db_params['password']
        )
        return conn
    except Exception as e:
        print(f"Error connecting to database: {e}")
        if conn is not None:
            conn.close()
        return Nonedef connect_to_postgres(db_params):
    """Connect to a PostgreSQL database."""
    import psycopg2
    
    conn = None
    try:
        conn = psycopg2.connect(
            host=db_params['host'],
            database=db_params['database'],
            user=db_params['user'],
            password=db_params['password']
        )
        return conn
    except Exception as e:
        print(f"Error connecting to database: {e}")
        if conn is not None:
            conn.close()
        return Nonedef connect_to_postgres(db_params):
    """Connect to a PostgreSQL database."""
    import psycopg2
    
    conn = None
    try:
        conn = psycopg2.connect(
            host=db_params['host'],
            database=db_params['database'],
            user=db_params['user'],
            password=db_params['password']
        )
        return conn
    except Exception as e:
        print(f"Error connecting to database: {e}")
        if conn is not None:
            conn.close()
        return Nonedef parse_csv(file_path):
    """Parse a CSV file and return a list of dictionaries."""
    import csv
    
    data = []
    with open(file_path, 'r') as f:
        reader = csv.DictReader(f)
        for row in reader:
            data.append(row)
    return datadef hash_password(password, salt=None):
    """Hash a password using PBKDF2."""
    import hashlib
    import os
    
    if salt is None:
        salt = os.urandom(32)
    
    key = hashlib.pbkdf2_hmac('sha256', password.encode('utf-8'), salt, 100000)
    return {'salt': salt, 'key': key}def binary_search(arr, target):
    """Perform binary search on a sorted array."""
    left, right = 0, len(arr) - 1
    
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    
    return -1def json_to_csv(json_data, output_file):
    """Convert JSON data to CSV format."""
    import csv
    import json
    
    with open(json_data, 'r') as json_file:
        data = json.load(json_file)
    
    keys = data[0].keys() if data else []
    
    with open(output_file, 'w', newline='') as csv_file:
        writer = csv.DictWriter(csv_file, fieldnames=keys)
        writer.writeheader()
        writer.writerows(data)def generate_password(length=12):
    """Generate a random password with the specified length."""
    import random
    import string
    characters = string.ascii_letters + string.digits + string.punctuation
    password = ''.join(random.choice(characters) for _ in range(length))
    return passworddef parse_csv(file_path):
    """Parse a CSV file and return a list of dictionaries."""
    import csv
    
    data = []
    with open(file_path, 'r') as f:
        reader = csv.DictReader(f)
        for row in reader:
            data.append(row)
    return datadef flatten_list(nested_list):
    """Flatten a nested list."""
    flattened = []
    for item in nested_list:
        if isinstance(item, list):
            flattened.extend(flatten_list(item))
        else:
            flattened.append(item)
    return flatteneddef generate_password(length=12):
    """Generate a random password with the specified length."""
    import random
    import string
    characters = string.ascii_letters + string.digits + string.punctuation
    password = ''.join(random.choice(characters) for _ in range(length))
    return passworddef connect_to_postgres(db_params):
    """Connect to a PostgreSQL database."""
    import psycopg2
    
    conn = None
    try:
        conn = psycopg2.connect(
            host=db_params['host'],
            database=db_params['database'],
            user=db_params['user'],
            password=db_params['password']
        )
        return conn
    except Exception as e:
        print(f"Error connecting to database: {e}")
        if conn is not None:
            conn.close()
        return Nonedef flatten_list(nested_list):
    """Flatten a nested list."""
    flattened = []
    for item in nested_list:
        if isinstance(item, list):
            flattened.extend(flatten_list(item))
        else:
            flattened.append(item)
    return flatteneddef hash_password(password, salt=None):
    """Hash a password using PBKDF2."""
    import hashlib
    import os
    
    if salt is None:
        salt = os.urandom(32)
    
    key = hashlib.pbkdf2_hmac('sha256', password.encode('utf-8'), salt, 100000)
    return {'salt': salt, 'key': key}def fibonacci(n, memo={}):
    """Calculate the nth Fibonacci number using memoization."""
    if n in memo:
        return memo[n]
    if n <= 2:
        return 1
    
    memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo)
    return memo[n]def quicksort(arr):
    """Quicksort implementation."""
    if len(arr) <= 1:
        return arr
    
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    
    return quicksort(left) + middle + quicksort(right)def fibonacci(n, memo={}):
    """Calculate the nth Fibonacci number using memoization."""
    if n in memo:
        return memo[n]
    if n <= 2:
        return 1
    
    memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo)
    return memo[n]def hash_password(password, salt=None):
    """Hash a password using PBKDF2."""
    import hashlib
    import os
    
    if salt is None:
        salt = os.urandom(32)
    
    key = hashlib.pbkdf2_hmac('sha256', password.encode('utf-8'), salt, 100000)
    return {'salt': salt, 'key': key}def verify_jwt_token(token, secret_key):
    """Verify a JWT token."""
    import jwt
    
    try:
        decoded = jwt.decode(token, secret_key, algorithms=['HS256'])
        return True, decoded
    except jwt.InvalidTokenError:
        return False, Nonedef parse_csv(file_path):
    """Parse a CSV file and return a list of dictionaries."""
    import csv
    
    data = []
    with open(file_path, 'r') as f:
        reader = csv.DictReader(f)
        for row in reader:
            data.append(row)
    return datadef json_to_csv(json_data, output_file):
    """Convert JSON data to CSV format."""
    import csv
    import json
    
    with open(json_data, 'r') as json_file:
        data = json.load(json_file)
    
    keys = data[0].keys() if data else []
    
    with open(output_file, 'w', newline='') as csv_file:
        writer = csv.DictWriter(csv_file, fieldnames=keys)
        writer.writeheader()
        writer.writerows(data)
```

Особое внимание обрати на обработку данных и защиту от уязвимостей.